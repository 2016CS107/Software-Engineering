<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>